{"version":3,"sources":["webpack:///./node_modules/@ecomplus/storefront-router/src/methods/map.js","webpack:///./node_modules/@ecomplus/storefront-router/src/methods/resolve.js","webpack:///./node_modules/@ecomplus/storefront-router/src/methods/list.js","webpack:///./node_modules/@ecomplus/storefront-router/src/methods/setup-store.js","webpack:///./node_modules/@ecomplus/storefront-router/src/index.js","webpack:///./node_modules/@ecomplus/storefront-template/template/js/lib/fallback-404.js"],"names":["map","self","path","location","pathname","slug","slice","url","storeId","replace","storefront","then","response","val","data","GET","resource","resourceId","split","_id","err","Error","resolve","route","Promise","reject","store","body","catch","promises","routes","forEach","push","result","Array","isArray","name","sku","find","all","setupStore","domain","updateConfig","hostname","platform","prop","_config","set","lang","default_lang","toUpperCase","store_id","window","this","$ecomConfig","get","arguments","list","$fallback404","$","length","URLSearchParams","search","router","EcomRouter","html","renderNotFound","class","i18n","pt_br","en_us","append","console","error","Vue","render","h","TheProduct","props","productId","SearchEngine","vueInstance","$mount"],"mappings":"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","file":"chunk.3c8a64501ac2ce9f502e.js","sourcesContent":["import { storefront } from '@ecomplus/client'\n\nconst map = (self, [path]) => {\n  if (!path) {\n    // get pathname from current location interface\n    path = self.location.pathname\n  }\n  // map page resource and object based on slug\n  const slug = typeof path === 'string' ? path.slice(1) : null\n  // replace / with $ on slug to escape URL\n  const url = '/' + self.storeId + '@' + slug.replace(/\\//g, '$') + '.json'\n\n  // send request to E-Com Plus Storefront API\n  return storefront({ url }).then(response => {\n    // { \"GET\": \"[resource]@[id]\" }\n    const val = response.data.GET\n    if (val) {\n      const [resource, resourceId] = val.split('@')\n      if (resourceId) {\n        // returns object with resource info on promise chain\n        return {\n          path,\n          resource,\n          _id: resourceId\n        }\n      }\n    }\n\n    // throw error to handle promise catch\n    const err = new Error('Resource not found, invalid slug or store ID')\n    // simulate axios error object\n    err.response = response\n    throw err\n  })\n}\n\n/**\n * @typedef {object} route\n * @property {string} path - Route URL pathname\n * @property {string} resource - Route resource type from\n * [E-Com Plus Store API]{@link https://developers.e-com.plus/docs/api/#/store/}\n * @property {string} _id - Route document Object ID from\n * [E-Com Plus Store API]{@link https://developers.e-com.plus/docs/api/#/store/}\n * @property {string} [name] - Route document name (not set on products)\n */\n\n/**\n * @method\n * @name EcomRouter#map\n * @description Get page resource and object ID based on URL pathname.\n *\n * @param {string} [path=location.pathname] - URL pathname\n * @returns {Promise<route|error>}\n *\n * @example\n\n// Mapping resource and object ID from current location pathname\nrouter.map()\n  .then(route => {\n    console.log(route.path)\n    console.log(route.resource)\n    console.log(route._id)\n  })\n  .catch(error => {\n    console.error(error)\n    if (error.response) {\n      console.log(error.response)\n    }\n  })\n\n * @example\n\n// Specifying some URL pathname\nrouter.map('/monitores')\n  .then(route => console.log(route))\n  .catch(error => console.error(error))\n\n */\n\nexport default map\n","import { store } from '@ecomplus/client'\n\nconst resolve = (self, [route]) => new Promise((resolve, reject) => {\n  // handle new route\n  const { storeId } = self\n  const { resource, _id } = route\n\n  if (resource && _id) {\n    // get current page object from Store API\n    store({ url: `/${resource}/${_id}.json`, storeId })\n      .then(({ data }) => {\n        // save object body on context\n        resolve({ resource, body: data })\n      })\n      .catch(reject)\n  } else {\n    // skip request and just reject with new error\n    const err = new Error('Invalid route resource or object ID')\n    err.response = {}\n    reject(err)\n  }\n})\n\n/**\n * @typedef {object} context\n * @property {string} resource - Context resource type from\n * [E-Com Plus Store API]{@link https://developers.e-com.plus/docs/api/#/store/}\n * @property {object} body - Context\n * [Store API]{@link https://developers.e-com.plus/docs/api/#/store/}\n * document body for respective route\n */\n\n/**\n * @method\n * @name EcomRouter#resolve\n * @description Get [Store API]{@link https://developers.e-com.plus/docs/api/#/store/}\n * document body based on route resource and Object ID.\n * <br><br>\n * <b>Tip</b>: Although resolve can be used standalone,\n * you may want to use [map]{@link EcomRouter#map} method first.\n *\n * @param {route} route - Route object to get respective document body\n * @returns {Promise<context|error>}\n *\n * @example\n\n// Get document body for current URL pathname\nrouter.map()\n  .then(route => {\n    router.resolve(route)\n      .then(context => {\n        console.log(context)\n        console.log(context.resource)\n        console.log(context.body)\n        console.log(context.body._id)\n        console.log(context.body.name)\n      })\n      .catch(error => { throw error })\n  })\n  .catch(error => {\n    console.error(error)\n    if (error.response) {\n      console.log(error.response)\n    }\n  })\n\n */\n\nexport default resolve\n","import { store } from '@ecomplus/client'\n\nexport default self => new Promise((resolve, reject) => {\n  const { storeId } = self\n  // list slugs for each resource\n  const promises = []\n  const routes = []\n\n  ;[\n    'products',\n    'categories',\n    'collections',\n    'brands'\n  ].forEach(resource => {\n    promises.push(\n      store({ url: `/${resource}.json`, storeId }).then(response => {\n        const { result } = response.data\n        if (Array.isArray(result)) {\n          result.forEach(({ _id, slug, name, sku }) => {\n            if (slug) {\n              // check it this path is not already in use\n              const path = '/' + slug\n              if (!routes.find(route => route.path === path)) {\n                // add new route object\n                routes.push({ resource, _id, path, name, sku })\n              }\n            }\n          })\n        }\n      })\n    )\n  })\n\n  // resolve when all promises are done\n  Promise.all(promises)\n    .then(() => resolve(routes))\n    .catch(reject)\n})\n\n/**\n * @method\n * @name EcomRouter#list\n * @description List all storefront routes for product, categories, brands and collections.\n *\n * @returns {Promise<route[]|error>}\n *\n * @example\n\n// Listing all routes, then resolving to get each document body\nrouter.list()\n  .then(routes => {\n    routes.forEach(route => {\n      console.log(route.path)\n      console.log(route.resource)\n      console.log(route._id)\n      if (route.name) {\n        console.log('Not a product', route.name)\n      }\n      router.resolve(route)\n        .then(context => {\n          console.log(context.body)\n        })\n        .catch(error => { throw error })\n    })\n  })\n  .catch(error => {\n    console.error(error)\n    if (error.response) {\n      console.log(error.response)\n    }\n  })\n\n */\n","import { _config } from '@ecomplus/utils'\nimport { platform } from '@ecomplus/client'\n\nconst setupStore = (self, [domain, updateConfig = true]) => {\n  if (!domain) {\n    // get domain from current location interface\n    domain = self.location.hostname\n  }\n  const url = '/domains/' + domain + '.json'\n\n  // send request to E-Com Plus Platform API\n  return platform({ url }).then(({ data }) => {\n    if (updateConfig) {\n      // set Store IDs on config\n      ;['store_id', 'store_object_id', 'channel_id'].forEach(prop => _config.set(prop, data[prop]))\n\n      // check for default sales channel language\n      const lang = data.default_lang\n      if (lang) {\n        // set default lang and country codes\n        _config.set('lang', lang)\n        _config.set('country_code', lang.replace(/^[a-z]{2}_/, '').toUpperCase())\n        if (lang === 'pt_br') {\n          // also change default currency\n          _config.set('currency', 'BRL')\n          _config.set('currency_symbol', 'R$')\n        }\n      }\n    }\n\n    // update instance Store ID\n    self.storeId = data.store_id\n    // returns channel info object on promise chain\n    return data\n  })\n}\n\n/**\n * @typedef {object} channel\n * @property {number} store_id - Sales channel Store ID\n * @property {string} store_object_id - Sales channel Store Object ID\n * @property {number} channel_id - Sales channel ID number\n * @property {string} [default_lang] - Sales channel default language code\n */\n\n/**\n * @method\n * @name EcomRouter#setupStore\n * @description Get Store IDs and default lang (and set on `_config`) based on domain name.\n *\n * @param {string} [domain=location.hostname] - Sales channel domain name\n * @param {boolean} [updateConfig=true] - Update global configs from `ecomUtils._config`\n * @returns {Promise<channel|error>}\n *\n * @example\n\n// Using current location URL\nrouter.setupStore()\n  .then(channel => {\n    console.log(channel.store_id)\n    console.log(channel.store_object_id)\n    console.log(channel)\n  })\n  .catch(error => {\n    console.error(error)\n    if (error.response) {\n      console.log(error.response)\n    }\n  })\n\n * @example\n\n// Specifying domain name and disabling `ecomUtils._config` update\nrouter.setupStore('shop-plus.e-com.plus', false)\n  .then(channel => console.log(channel))\n  .catch(error => console.error(error))\n\n */\n\nexport default setupStore\n","/**\n * Universal JS router for E-Com Plus storefront.\n * {@link https://github.com/ecomclub/storefront-router GitHub}\n *\n * @module @ecomplus/storefront-router\n * @author E-Com Club <ti@e-com.club>\n * @return {@link EcomRouter}\n * @see EcomRouter\n *\n * @example\n * // ES import default\n * import EcomRouter from '@ecomplus/storefront-router'\n *\n * @example\n * // With CommonJS\n * const EcomRouter = require('@ecomplus/storefront-router')\n *\n * @example\n * <!-- Global `EcomRouter` from CDN on browser -->\n * <script src=\"https://cdn.jsdelivr.net/npm/@ecomplus/storefront-router/dist/ecom-router.var.min.js\"></script>\n *\n * @example\n * <!-- Bundle from CDN with `ecomUtils` and `ecomClient` -->\n * <script\n *   src=\"https://cdn.jsdelivr.net/npm/@ecomplus/storefront-router/dist/ecom-router.bundle.min.js\"\n * ></script>\n */\n\nimport { $ecomConfig } from '@ecomplus/utils'\nimport map from './methods/map'\nimport resolve from './methods/resolve'\nimport list from './methods/list'\nimport setupStore from './methods/setup-store'\n\nexport default function (storeId, location = typeof window === 'object' && window.location) {\n  const self = this\n\n  /**\n   * Respective Store ID number\n   * @name EcomRouter#storeId\n   * @type {number}\n   */\n  this.storeId = storeId || $ecomConfig.get('store_id')\n\n  /**\n   * [Location interface]{@link https://developer.mozilla.org/en-US/docs/Web/API/Location}\n   * @name EcomRouter#location\n   * @type {object}\n   */\n  this.location = location\n\n  this.map = function () {\n    return map(self, arguments)\n  }\n\n  this.resolve = function () {\n    return resolve(self, arguments)\n  }\n\n  this.list = function () {\n    return list(self, arguments)\n  }\n\n  this.setupStore = function () {\n    return setupStore(self, arguments)\n  }\n}\n\n/**\n * Construct a new storefront router object.\n * @class EcomRouter\n * @param {number} [storeId=_config.get('store_id')] - Preset Store ID number\n * @param {object} [location=window.location] -\n * [Location interface]{@link https://developer.mozilla.org/en-US/docs/Web/API/Location}\n *\n * @example\n\nconst router = new EcomRouter()\n\n *\n * @example\n\n// Defining Store ID and using custom location interface\nconst storeId = 2000\nconst router = new EcomRouter(storeId, DOM.location)\n// P.S.: You may want to use custom location when using jsdom on Node.js for example\n\n */\n","import { i18n } from '@ecomplus/utils'\nimport EcomRouter from '@ecomplus/storefront-router'\nimport { $ } from '@ecomplus/storefront-twbs'\nimport Vue from 'vue'\nimport TheProduct from '#components/TheProduct.vue'\nimport SearchEngine from '#components/SearchEngine.vue'\n\nconst $fallback404 = $('#fallback-404')\nif ($fallback404.length) {\n  const urlParams = new URLSearchParams(window.location.search)\n  const url = urlParams.get('url')\n  if (url) {\n    const router = new EcomRouter()\n    $fallback404.html('<div class=\"spinner-border\" role=\"status\"></div>')\n\n    const renderNotFound = () => {\n      $fallback404.html($('<h3>', {\n        class: 'my-4',\n        html: [\n          '<i class=\"text-muted fas fa-exclamation-triangle mr-3\"></i>',\n          i18n({\n            pt_br: 'Página não encontrada',\n            en_us: 'Page not found'\n          })\n        ]\n      }))\n\n      router.list()\n        .then(routes => {\n          $fallback404.append([\n            $('<p>', {\n              class: 'lead',\n              html: i18n({\n                pt_br: 'Mapa do site:',\n                en_us: 'Sitemap:'\n              })\n            }),\n            $('<ul>', {\n              html: routes.map(({ path }) => {\n                return `<li><a href=\"${path}\">${path}</a></li>`\n              })\n            })\n          ])\n        })\n        .catch(console.error)\n    }\n\n    router.map(url)\n      .then(route => {\n        const { resource, _id } = route\n        switch (resource) {\n          case 'products':\n            return new Vue({\n              render: h => h(TheProduct, {\n                props: {\n                  productId: _id\n                }\n              })\n            })\n\n          case 'brands':\n          case 'categories':\n            return router.resolve(route)\n              .then(({ body }) => {\n                return new Vue({\n                  render: h => h(SearchEngine, {\n                    props: {\n                      [resource]: [body.name]\n                    }\n                  })\n                })\n              })\n        }\n      })\n\n      .then(vueInstance => {\n        if (vueInstance) {\n          vueInstance.$mount($fallback404[0])\n        } else {\n          renderNotFound()\n        }\n      })\n\n      .catch(err => {\n        console.error(err)\n        renderNotFound()\n      })\n  }\n}\n"],"sourceRoot":""}